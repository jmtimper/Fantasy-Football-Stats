from django.db import models

# Create your models here.

class Departments(models.Model):
    DepartmentId = models.AutoField(primary_key=True)
    DepartmentName = models.CharField(max_length=100)
    
class Employees(models.Model):
    EmployeeId = models.AutoField(primary_key=True)
    EmployeeName = models.CharField(max_length=100)
    Department = models.CharField(max_length=100)
    DateOfJoining = models.DateField()
    PhotoFileName = models.CharField(max_length=100)
    
class Gamelogs(models.Model):
    # General
    gamelog_id = models.CharField(max_length=13, primary_key=True)
    player_id = models.CharField(max_length=8)
    year_id = models.PositiveSmallIntegerField()
    game_date = models.DateField()
    game_num = models.PositiveSmallIntegerField()
    week_num = models.PositiveSmallIntegerField()
    age = models.FloatField()
    team = models.CharField(max_length=3)
    game_location = models.CharField(max_length=1, blank=True, null=True)
    opp = models.CharField(max_length=3)
    game_result = models.CharField(max_length=7)
    gs = models.CharField(max_length=1, blank=True, null=True)
    # Passing
    pass_cmp = models.PositiveSmallIntegerField(blank=True, null=True)
    pass_att = models.PositiveSmallIntegerField(blank=True, null=True)
    pass_cmp_perc = models.FloatField(blank=True, null=True)
    pass_yds = models.SmallIntegerField(blank=True, null=True)
    pass_td = models.PositiveSmallIntegerField(blank=True, null=True)
    pass_int = models.PositiveSmallIntegerField(blank=True, null=True)
    pass_rating = models.FloatField(blank=True, null=True)
    pass_sacked = models.PositiveSmallIntegerField(blank=True, null=True)
    pass_sacked_yds = models.SmallIntegerField(blank=True, null=True)
    pass_yds_per_att = models.FloatField(blank=True, null=True)
    pass_adj_yds_per_att = models.FloatField(blank=True, null=True)
    # Rushing
    rush_att = models.PositiveSmallIntegerField(blank=True, null=True)
    rush_yds = models.SmallIntegerField(blank=True, null=True)
    rush_yds_per_att = models.FloatField(blank=True, null=True)
    rush_td = models.PositiveSmallIntegerField(blank=True, null=True)
    # Receiving
    targets = models.PositiveSmallIntegerField(blank=True, null=True)
    rec = models.PositiveSmallIntegerField(blank=True, null=True)
    rec_yds = models.SmallIntegerField(blank=True, null=True)
    rec_yds_per_rec = models.FloatField(blank=True, null=True)
    rec_td = models.PositiveSmallIntegerField(blank=True, null=True)
    catch_pct = models.FloatField(blank=True, null=True)
    rec_yds_per_tgt = models.FloatField(blank=True, null=True)
    # Scoring
    two_pt_md = models.PositiveSmallIntegerField(blank=True, null=True)
    all_td = models.PositiveSmallIntegerField(blank=True, null=True)
    scoring = models.PositiveSmallIntegerField(blank=True, null=True)
    # Fumbles
    fumbles = models.PositiveSmallIntegerField(blank=True, null=True)
    fumbles_lost = models.PositiveSmallIntegerField(blank=True, null=True)
    fumbles_forced = models.PositiveSmallIntegerField(blank=True, null=True)
    fumbles_rec = models.PositiveSmallIntegerField(blank=True, null=True)
    fumbles_rec_yds = models.FloatField(blank=True, null=True)
    fumbles_rec_td = models.PositiveSmallIntegerField(blank=True, null=True)
    # Defense
    safety_md = models.PositiveSmallIntegerField(blank=True, null=True) 
    sacks = models.FloatField(blank=True, null=True)
    tackles_solo = models.PositiveSmallIntegerField(blank=True, null=True)
    tackles_assists = models.PositiveSmallIntegerField(blank=True, null=True)
    tackles_combined = models.PositiveSmallIntegerField(blank=True, null=True)
    tackles_loss = models.PositiveSmallIntegerField(blank=True, null=True)
    qb_hits = models.PositiveSmallIntegerField(blank=True, null=True)
    def_int = models.PositiveSmallIntegerField(blank=True, null=True)
    def_int_yds = models.PositiveSmallIntegerField(blank=True, null=True)
    def_int_td = models.PositiveSmallIntegerField(blank=True, null=True)
    pass_defended = models.PositiveSmallIntegerField(blank=True, null=True)
    # Kick/Punt Returns
    kick_ret = models.PositiveSmallIntegerField(blank=True, null=True)
    kick_ret_yds = models.PositiveSmallIntegerField(blank=True, null=True)
    kick_ret_yds_per_ret = models.FloatField(blank=True, null=True)
    kick_ret_td = models.PositiveSmallIntegerField(blank=True, null=True)
    punt_ret = models.PositiveSmallIntegerField(blank=True, null=True)
    punt_ret_yds = models.PositiveSmallIntegerField(blank=True, null=True)
    punt_ret_yds_per_ret = models.FloatField(blank=True, null=True)
    punt_ret_td = models.PositiveSmallIntegerField(blank=True, null=True)
    # Field Goal
    xpm = models.PositiveSmallIntegerField(blank=True, null=True)
    xpa = models.PositiveSmallIntegerField(blank=True, null=True)
    xp_perc = models.FloatField(blank=True, null=True)
    fgm = models.PositiveSmallIntegerField(blank=True, null=True)
    fga = models.PositiveSmallIntegerField(blank=True, null=True)
    fg_perc = models.FloatField(blank=True, null=True)
    # Punting
    punt = models.PositiveSmallIntegerField(blank=True, null=True)
    punt_yds = models.PositiveSmallIntegerField(blank=True, null=True)
    punt_yds_per_punt = models.FloatField(blank=True, null=True)
    punt_blocked = models.PositiveSmallIntegerField(blank=True, null=True)
    # Percentages
    offense = models.PositiveSmallIntegerField(blank=True, null=True)
    off_pct = models.FloatField(blank=True, null=True)
    defense = models.PositiveSmallIntegerField(blank=True, null=True)
    def_pct = models.FloatField(blank=True, null=True)
    special_teams = models.PositiveSmallIntegerField(blank=True, null=True)
    st_pct = models.FloatField(blank=True, null=True)